#ifndef WFA_FUELS_H
#define WFA_FUELS_H
//#pragma message("WFA_FUELS_H")

#include<fstream>
#include <unordered_map>
#include "WFA_Helper.h"

class FuelFamilyItem
{
public:
	int FuelNum;
	double Load1h, Load10h, Load100h, LoadHerb, LoadWoody, Dynamic, Sarv1h, SarvHerb, SarvWoody, Depth, MoistExtReal, Heat;

	FuelFamilyItem() { };

	FuelFamilyItem(int fuelNum, double load1H, double load10H, double load100H, double loadHerb, double loadWoody, double dynamic, double sarv1H, double sarvHerb, double sarvWoody, double depth, double moistExtReal, double heat)
	{
		FuelNum = fuelNum; Load1h = load1H; Load10h = load10H; Load100h = load100H; LoadHerb = loadHerb;	LoadWoody = loadWoody; Dynamic = dynamic; Sarv1h = sarv1H; SarvHerb = sarvHerb; SarvWoody = sarvWoody; Depth = depth; MoistExtReal = moistExtReal; Heat = heat;
	}

	FuelFamilyItem(std::vector<std::string> data)
	{
		FuelNum = (int)atof(data[0].c_str());
		Load1h = atof(data[1].c_str());
		Load10h = atof(data[2].c_str());
		Load100h = atof(data[3].c_str());
		LoadHerb = atof(data[4].c_str());
		LoadWoody = atof(data[5].c_str());
		Dynamic = atof(data[6].c_str());
		Sarv1h = atof(data[7].c_str());
		SarvHerb = atof(data[8].c_str());
		SarvWoody = atof(data[9].c_str());
		Depth = atof(data[10].c_str());
		MoistExtReal = atof(data[11].c_str());
		Heat = atof(data[12].c_str());
	}

};

class Fuels
{

public:
	std::unordered_map <int, int> dic_ToPos;
	std::vector<FuelFamilyItem> list;


	Fuels() {}


	void GetBurgan()
	{
		double f[43][13]
		{
			{ 99,0.001,0,0,0,0,0,2000,9999,9999,0.01,0.001,8000
			}, { 101,0.00459137   ,0          ,0          ,0.01377411         ,0          ,1,2200,2000,9999,0.4,0.15,8000
			}, { 102,0.00459137   ,0          ,0          ,0.0459137          ,0          ,1,2000,1800,9999,1,0.15,8000
			}, { 103,0.00459137   ,0.01836548 ,0          ,0.06887055         ,0          ,1,1500,1300,9999,2,0.3,8000
			}, { 104,0.011478     ,0          ,0          ,0.087229           ,0          ,1,2000,1800,9999,2,0.15,8000
			}, { 105,0.01836548   ,0          ,0          ,0.11478425         ,0          ,1,1800,1600,9999,1.5,0.4,8000
			}, { 106,0.00459137   ,0          ,0          ,0.15610658         ,0          ,1,2200,2000,9999,1.5,0.4,9000
			}, { 107,0.0459137    ,0          ,0          ,0.24793398         ,0          ,1,2000,1800,9999,3,0.15,8000
			}, { 108,0.02295685   ,0.0459137  ,0          ,0.33517001         ,0          ,1,1500,1300,9999,4,0.3,8000
			}, { 109,0.0459137    ,0.0459137  ,0          ,0.4132233          ,0          ,1,1800,1600,9999,5,0.4,8000
			}, { 121,0.00918274   ,0          ,0          ,0.02295685         ,0.029843905,1,2000,1800,1800,0.9,0.15,8000
			}, { 122,0.02295685,0.02295685,0,0.02754822,0.0459137,1,2000,1800,1800,1.5,0.15,8000
			}, { 123,0.01377411,0.011478425,0,0.066574865,0.057392125,1,1800,1600,1600,1.8,0.4,8000
			}, { 124,0.08723603,0.01377411,0.00459137,0.15610658,0.32598727,1,1800,1600,1600,2.1,0.4,8000
			}, { 141,0.011478425,0.011478425,0,0.006887055,0.05968781,1,2000,1800,1600,1,0.15,8000
			}, { 142,0.061983495,0.11019288,0.034435275,0,0.176767745,0,2000,9999,1600,1,0.15,8000
			}, { 143,0.020661165,0.1377411,0,0,0.28466494,0,1600,9999,1400,2.4,0.4,8000
			}, { 144,0.039026645,0.052800755,0.00918274,0,0.117079935,0,2000,1800,1600,3,0.3,8000
			}, { 145,0.16528932,0.09641877,0,0,0.13314973,0,750,9999,1600,6,0.15,8000
			}, { 146,0.13314973,0.066574865,0,0,0.06427918,0,750,9999,1600,2,0.3,8000
			}, { 147,0.16069795,0.24334261,0.10101014,0,0.15610658,0,750,9999,1600,6,0.15,8000
			}, { 148,0.094123085,0.15610658,0.039026645,0,0.199724595,0,750,9999,1600,3,0.4,8000
			}, { 149,0.20661165,0.112488565,0,0.071166235,0.3213959,1,750,1800,1500,4.4,0.4,8000
			}, { 161,0.00918274,0.04132233,0.06887055,0.00918274,0.04132233,1,2000,1800,1600,0.6,0.2,8000
			}, { 162,0.043618015,0.08264466,0.057392125,0,0.00918274,0,2000,9999,1600,1,0.3,8000
			}, { 163,0.05050507,0.006887055,0.011478425,0.029843905,0.05050507,1,1800,1600,1400,1.3,0.3,8000
			}, { 164,0.20661165,0,0,0,0.0918274,0,2300,9999,2000,0.5,0.12,8000
			}, { 165,0.1836548,0.1836548,0.1377411,0,0.1377411,0,1500,9999,750,1,0.25,8000
			}, { 181,0.0459137,0.10101014,0.16528932,0,0,0,2000,9999,9999,0.2,0.3,8000

			}, { 182,0.06427918,0.10560151,0.10101014,0,0,0,2000,9999,9999,0.2,0.25,8000
			}, { 183,0.02295685,0.10101014,0.12855836,0,0,0,2000,9999,9999,0.3,0.2,8000

			}, { 184,0.02295685,0.06887055,0.19283754,0,0,0,2000,9999,9999,0.4,0.25,8000
			}, { 185,0.052800755,0.11478425,0.20202028,0,0,0,2000,9999,1600,0.6,0.25,8000
			}, { 186,0.11019288,0.05509644,0.05509644,0,0,0,2000,9999,9999,0.3,0.25,8000
			}, { 187,0.01377411,0.06427918,0.37190097,0,0,0,2000,9999,9999,0.4,0.25,8000
			}, { 188,0.26629946,0.06427918,0.05050507,0,0,0,1800,9999,9999,0.3,0.35,8000
			}, { 189,0.305326105,0.15151521,0.190541855,0,0,0,1800,9999,1600,0.6,0.35,8000
			}, { 201,0.06887055,0.1377411,0.5050507,0,0,0,2000,9999,9999,1,0.25,8000
			}, { 202,0.20661165,0.195133225,0.1836548,0,0,0,2000,9999,9999,1,0.25,8000
			}, { 203,0.25252535,0.126262675,0.1377411,0,0,0,2000,9999,9999,1.2,0.25,8000
			}, { 204,0.241046925,0.16069795,0.241046925,0,0,0,2000,9999,9999,2.7,0.25,8000
			},{ 10,0.138,0.092,0.23,0,0.092,0,2000,9999,1500,1,0.25,8000
			},{4,0.23,0.184,0.092,0,0.23,0,2000,9999,1500,6,0.2,8000
			}


		};


		for (size_t i = 0; i < 43; i++)
		{
			dic_ToPos[f[i][0]] = i;
			list.push_back(FuelFamilyItem(f[i][0], f[i][1], f[i][2], f[i][3], f[i][4], f[i][5], f[i][6], f[i][7], f[i][8], f[i][9], f[i][10], f[i][11], f[i][12]));
		}
	};


	void GetClasic()
	{
		double f[14][13]
		{
			 {0,0.001,0,0,0,0,0,2000,9999,9999,0.01,0.0001,8000},
			 {1,0.034,0,0,0,0,0,3500,9999,9999,1,0.12,8000},
			 {2,0.092,0.046,0.023,0,0.023,0,3000,9999,1500,1,0.15,8000},
			{3,0.138,0,0,0,0,0,1500,9999,9999,2.5,0.25,8000},
			{4,0.23,0.184,0.092,0,0.23,0,2000,9999,1500,6,0.2,8000},
			 {5,0.046,0.023,0,0,0.092,0,2000,9999,1500,2,0.2,8000},
			 {6,0.069,0.115,0.092,0,0,0,1750,9999,9999,2.5,0.25,8000},
			 {7,0.052,0.086,0.069,0,0.017,0,1750,9999,1500,2.5,0.4,8000},
			{8,0.069,0.046,0.115,0,0,0,2000,9999,9999,0.2,0.3,8000},
		 {9,0.134,0.019,0.007,0,0,0,2500,9999,9999,0.2,0.25,8000},
		 {10,0.138,0.092,0.23,0,0.092,0,2000,9999,1500,1,0.25,8000},
			 {11,0.069,0.207,0.253,0,0,0,1500,9999,9999,1,0.15,8000},
		 {12,0.184,0.644,0.759,0,0,0,1500,9999,9999,2.3,0.2,8000},
			 {13, 0.322, 1.058, 1.288, 0, 0, 0, 1500, 9999, 9999, 3, 0.25, 8000}
		};



		for (size_t i = 0; i < 43; i++)
		{
			dic_ToPos[f[i][0]] = i;
			list.push_back(FuelFamilyItem(f[i][0], f[i][1], f[i][2], f[i][3], f[i][4], f[i][5], f[i][6], f[i][7], f[i][8], f[i][9], f[i][10], f[i][11], f[i][12]));
		}
	};





	void GetCustom(std::string path)
	{
		try
		{
			std::vector<std::vector < std::string >> f = Read_CSV(path);
			for (int i = 1; i < (int)f.size(); i++)
			{
				list.push_back(FuelFamilyItem(f[i]));
			}
		}
		catch (const std::exception&)
		{

			throw "Unknown problem with the fuel models";
		}
	};

};






#endif

